/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AboutRouteImport } from './routes/about'
import { Route as Protected_routesRouteImport } from './routes/_protected_routes'
import { Route as IndexRouteImport } from './routes/index'
import { Route as Protected_routesProtectedRouteImport } from './routes/_protected_routes/protected'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const Protected_routesRoute = Protected_routesRouteImport.update({
  id: '/_protected_routes',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const Protected_routesProtectedRoute =
  Protected_routesProtectedRouteImport.update({
    id: '/protected',
    path: '/protected',
    getParentRoute: () => Protected_routesRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/protected': typeof Protected_routesProtectedRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/protected': typeof Protected_routesProtectedRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected_routes': typeof Protected_routesRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_protected_routes/protected': typeof Protected_routesProtectedRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/login' | '/register' | '/protected'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/login' | '/register' | '/protected'
  id:
    | '__root__'
    | '/'
    | '/_protected_routes'
    | '/about'
    | '/login'
    | '/register'
    | '/_protected_routes/protected'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  Protected_routesRoute: typeof Protected_routesRouteWithChildren
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected_routes': {
      id: '/_protected_routes'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Protected_routesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected_routes/protected': {
      id: '/_protected_routes/protected'
      path: '/protected'
      fullPath: '/protected'
      preLoaderRoute: typeof Protected_routesProtectedRouteImport
      parentRoute: typeof Protected_routesRoute
    }
  }
}

interface Protected_routesRouteChildren {
  Protected_routesProtectedRoute: typeof Protected_routesProtectedRoute
}

const Protected_routesRouteChildren: Protected_routesRouteChildren = {
  Protected_routesProtectedRoute: Protected_routesProtectedRoute,
}

const Protected_routesRouteWithChildren =
  Protected_routesRoute._addFileChildren(Protected_routesRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Protected_routesRoute: Protected_routesRouteWithChildren,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
